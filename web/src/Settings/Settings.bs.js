// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Slider$Web from "../components/Slider.bs.js";
import * as Window$Web from "../Window/Window.bs.js";
import * as Command$Web from "../Interop/Command.bs.js";
import SettingsCss from "./Settings.css";
import * as Settings$Shared from "shared/src/Settings.bs.js";

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* LoadComplete */0 :
        return action._0;
    case /* SetBreakInterval */1 :
        return {
                maxBreakInterval: state.maxBreakInterval,
                minBreakInterval: state.minBreakInterval,
                breakInterval: action._0,
                maxBreakDuration: state.maxBreakDuration,
                minBreakDuration: state.minBreakDuration,
                breakDuration: state.breakDuration
              };
    case /* SetBreakDuration */2 :
        return {
                maxBreakInterval: state.maxBreakInterval,
                minBreakInterval: state.minBreakInterval,
                breakInterval: state.breakInterval,
                maxBreakDuration: state.maxBreakDuration,
                minBreakDuration: state.minBreakDuration,
                breakDuration: action._0
              };
    
  }
}

function Settings(Props) {
  var match = React.useReducer(reducer, Settings$Shared.$$default);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          Command$Web.on(function (cmd) {
                if (typeof cmd === "number" || cmd.TAG !== /* ReturnSettings */0) {
                  return ;
                } else {
                  return Curry._1(dispatch, {
                              TAG: /* LoadComplete */0,
                              _0: cmd._0
                            });
                }
              });
          Command$Web.send(/* GetSettings */2);
          
        }), []);
  var onBreakIntervalChange = function (value) {
    Command$Web.send({
          TAG: /* SetBreakInterval */2,
          _0: value | 0
        });
    return Curry._1(dispatch, {
                TAG: /* SetBreakInterval */1,
                _0: value | 0
              });
  };
  var onBreakDurationChange = function (value) {
    Command$Web.send({
          TAG: /* SetBreakDuration */1,
          _0: value | 0
        });
    return Curry._1(dispatch, {
                TAG: /* SetBreakDuration */2,
                _0: value | 0
              });
  };
  return React.createElement(Window$Web.make, {
              title: "Settings",
              children: React.createElement("div", {
                    className: "settings"
                  }, React.createElement("section", {
                        className: "settings__section"
                      }, React.createElement("h3", undefined, "Break interval"), React.createElement("div", {
                            className: "settings__slider"
                          }, React.createElement(Slider$Web.make, {
                                value: state.breakInterval,
                                onChange: onBreakIntervalChange,
                                min: state.minBreakInterval,
                                max: state.maxBreakInterval
                              })), React.createElement("p", {
                            className: "settings__detail"
                          }, "2 hours 30 minutes")), React.createElement("section", {
                        className: "settings__section"
                      }, React.createElement("h3", undefined, "Break duration"), React.createElement("div", {
                            className: "settings__slider"
                          }, React.createElement(Slider$Web.make, {
                                value: state.breakDuration,
                                onChange: onBreakDurationChange,
                                min: state.minBreakDuration,
                                max: state.maxBreakDuration
                              })), React.createElement("p", {
                            className: "settings__detail"
                          }, "30 minutes"))),
              maximize: false
            });
}

var make = Settings;

export {
  make ,
  
}
/*  Not a pure module */

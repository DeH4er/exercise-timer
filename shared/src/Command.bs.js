// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jzon from "rescript-jzon/src/Jzon.bs.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Language$Shared from "./Language.bs.js";
import * as Settings$Shared from "./Settings.bs.js";
import * as Serializable$Shared from "./Serializable.bs.js";

var $$int = Jzon.object1((function (i) {
        return i;
      }), (function (i) {
        return {
                TAG: /* Ok */0,
                _0: i
              };
      }), Jzon.field("int", Jzon.$$int));

var language = Jzon.object1((function (language) {
        return language;
      }), (function (language) {
        return {
                TAG: /* Ok */0,
                _0: language
              };
      }), Jzon.field("language", Language$Shared.Codec.$$default));

var emptyObject = {};

var $$default = Jzon.object2((function (shape) {
        if (typeof shape === "number") {
          switch (shape) {
            case /* CloseWindow */0 :
                return [
                        "CloseWindow",
                        emptyObject
                      ];
            case /* MinimizeWindow */1 :
                return [
                        "MinimizeWindow",
                        emptyObject
                      ];
            case /* GetSettings */2 :
                return [
                        "GetSettings",
                        emptyObject
                      ];
            
          }
        } else {
          switch (shape.TAG | 0) {
            case /* ReturnSettings */0 :
                return [
                        "ReturnSettings",
                        Jzon.encodeWith(shape._0, Settings$Shared.Codec.$$default)
                      ];
            case /* SetBreakDuration */1 :
                return [
                        "SetBreakDuration",
                        Jzon.encodeWith(shape._0, $$int)
                      ];
            case /* SetBreakInterval */2 :
                return [
                        "SetBreakInterval",
                        Jzon.encodeWith(shape._0, $$int)
                      ];
            case /* ReturnBreakTime */3 :
                return [
                        "ReturnBreakTime",
                        Jzon.encodeWith(shape._0, $$int)
                      ];
            case /* ChangeLanguage */4 :
                return [
                        "ChangeLanguage",
                        Jzon.encodeWith(shape._0, language)
                      ];
            case /* LanguageChanged */5 :
                return [
                        "LanguageChanged",
                        Jzon.encodeWith(shape._0, language)
                      ];
            
          }
        }
      }), (function (param) {
        var json = param[1];
        var kind = param[0];
        switch (kind) {
          case "ChangeLanguage" :
              return Belt_Result.map(Jzon.decodeWith(json, language), (function (decoded) {
                            return {
                                    TAG: /* ChangeLanguage */4,
                                    _0: decoded
                                  };
                          }));
          case "CloseWindow" :
              return {
                      TAG: /* Ok */0,
                      _0: /* CloseWindow */0
                    };
          case "GetSettings" :
              return {
                      TAG: /* Ok */0,
                      _0: /* GetSettings */2
                    };
          case "LanguageChanged" :
              return Belt_Result.map(Jzon.decodeWith(json, language), (function (decoded) {
                            return {
                                    TAG: /* LanguageChanged */5,
                                    _0: decoded
                                  };
                          }));
          case "MinimizeWindow" :
              return {
                      TAG: /* Ok */0,
                      _0: /* MinimizeWindow */1
                    };
          case "ReturnBreakTime" :
              return Belt_Result.map(Jzon.decodeWith(json, $$int), (function (decoded) {
                            return {
                                    TAG: /* ReturnBreakTime */3,
                                    _0: decoded
                                  };
                          }));
          case "ReturnSettings" :
              return Belt_Result.map(Jzon.decodeWith(json, Settings$Shared.Codec.$$default), (function (decoded) {
                            return {
                                    TAG: /* ReturnSettings */0,
                                    _0: decoded
                                  };
                          }));
          case "SetBreakDuration" :
              return Belt_Result.map(Jzon.decodeWith(json, $$int), (function (decoded) {
                            return {
                                    TAG: /* SetBreakDuration */1,
                                    _0: decoded
                                  };
                          }));
          case "SetBreakInterval" :
              return Belt_Result.map(Jzon.decodeWith(json, $$int), (function (decoded) {
                            return {
                                    TAG: /* SetBreakInterval */2,
                                    _0: decoded
                                  };
                          }));
          default:
            return {
                    TAG: /* Error */1,
                    _0: {
                      NAME: "UnexpectedJsonValue",
                      VAL: [
                        [{
                            TAG: /* Field */0,
                            _0: "kind"
                          }],
                        kind
                      ]
                    }
                  };
        }
      }), Jzon.field("kind", Jzon.string), Jzon.self);

var Codec = {
  $$int: $$int,
  language: language,
  emptyObject: emptyObject,
  $$default: $$default
};

var Serializable = Serializable$Shared.MakeSerializable({
      $$default: $$default
    });

export {
  Codec ,
  Serializable ,
  
}
/* int Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Window$Web from "../Window/Window.bs.js";
import BreakCss from "./Break.css";
import * as Command$Web from "../Interop/Command.bs.js";
import * as Time$Shared from "shared/src/Time.bs.js";
import * as ProgressBar$Web from "../components/ProgressBar.bs.js";
import * as Settings$Shared from "shared/src/Settings.bs.js";

function getRemainingText(breakTime, breakDuration) {
  return Time$Shared.millisToString(breakDuration - breakTime | 0, undefined, undefined, undefined, undefined);
}

function reducer(state, action) {
  if (action.TAG === /* SetBreakTime */0) {
    var breakTime = action._0;
    return {
            breakTime: breakTime,
            settings: state.settings,
            remainingText: getRemainingText(breakTime, state.settings.breakDuration)
          };
  }
  var settings = action._0;
  return {
          breakTime: state.breakTime,
          settings: settings,
          remainingText: getRemainingText(state.breakTime, settings.breakDuration)
        };
}

function Break(Props) {
  var match = React.useReducer(reducer, {
        breakTime: 0,
        settings: Settings$Shared.$$default,
        remainingText: ""
      });
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          var listener = Command$Web.on(function (cmd) {
                if (typeof cmd === "number") {
                  return ;
                }
                switch (cmd.TAG | 0) {
                  case /* ReturnSettings */0 :
                      return Curry._1(dispatch, {
                                  TAG: /* SetSettings */1,
                                  _0: cmd._0
                                });
                  case /* ReturnBreakTime */3 :
                      return Curry._1(dispatch, {
                                  TAG: /* SetBreakTime */0,
                                  _0: cmd._0
                                });
                  default:
                    return ;
                }
              });
          Command$Web.send(/* GetSettings */2);
          return (function (param) {
                    return Command$Web.removeListener(listener);
                  });
        }), []);
  return React.createElement(Window$Web.make, {
              children: React.createElement("div", {
                    className: "break"
                  }, React.createElement("div", {
                        className: "break__title"
                      }, "Long working sessions may affect your health. Take a break"), React.createElement("div", {
                        className: "break__remaining"
                      }, React.createElement("div", {
                            className: "break__remaining-progress"
                          }, React.createElement(ProgressBar$Web.make, {
                                max: state.settings.breakDuration,
                                value: state.breakTime
                              })), React.createElement("div", {
                            className: "break__remaining-text"
                          }, state.remainingText))),
              titlebar: false
            });
}

var make = Break;

export {
  make ,
  
}
/*  Not a pure module */

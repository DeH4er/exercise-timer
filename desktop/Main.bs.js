// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Path from "path";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Electron from "./Interop/Electron.bs.js";
import * as Electron$1 from "electron";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as DesktopPaths from "./DesktopPaths.bs.js";
import * as DesktopCommand from "./DesktopCommand.bs.js";

var appState = {
  tray: undefined,
  settingsWindow: undefined,
  settings: {
    breakDuration: 0,
    breakInterval: 0
  }
};

function createWindow(width, height, startupUrl, param) {
  var $$window = Electron.BrowserWindow.create(false, {
        preload: Path.join(DesktopPaths.scriptsPath, "windowPreload.js")
      }, width, height, undefined);
  var url = DesktopPaths.webPath + "#" + startupUrl;
  $$window.loadURL(url);
  if (!Electron$1.app.isPackaged) {
    $$window.webContents.openDevTools();
  }
  return $$window;
}

function exit(prim) {
  Electron$1.app.quit();
  
}

function openSettings(param) {
  var match = appState.settingsWindow;
  if (match !== undefined) {
    return ;
  }
  var $$window = createWindow(800, 400, "settings", undefined);
  appState.settingsWindow = $$window;
  
}

DesktopCommand.onCommand(function ($$event, command) {
      var $$window = Electron$1.BrowserWindow.fromWebContents($$event.sender);
      if (command) {
        $$window.minimize();
      } else {
        $$window.close();
        Belt_Option.map(appState.settingsWindow, (function (settingsWindow) {
                if (Caml_obj.caml_equal($$window, settingsWindow)) {
                  appState.settingsWindow = undefined;
                  return ;
                }
                
              }));
      }
      
    });

Electron$1.app.whenReady().then(function (param) {
      var iconPath = Path.join(DesktopPaths.imgPath, "icon.png");
      var createdTray = new Electron$1.Tray(iconPath);
      appState.tray = Caml_option.some(createdTray);
      var menu = Electron$1.Menu.buildFromTemplate([
            {
              label: "Settings",
              click: openSettings
            },
            {
              label: "Exit",
              click: exit
            }
          ]);
      createdTray.setContextMenu(menu);
      return Promise.resolve(undefined);
    });

export {
  appState ,
  createWindow ,
  exit ,
  openSettings ,
  
}
/*  Not a pure module */
